input:
  root: RootObject
  objects:
    RootObject:
      id: RootObject
      properties:
        global_params:
          required: true
          type:
            items:
              id: GlobalParams
              type_id: ref
            type_id: list
        platform_params:
          required: true
          type:
            items:
              id: PlatformParams
              type_id: ref
            type_id: list
        sut_params:
          required: true
          type:
            items:
              id: SUTParams
              type_id: ref
            type_id: list
        workload_geometry:
          required: true
          type:
            items:
              id: WorkloadGeometry
              type_id: ref
            type_id: list
        uperf_workload:
          required: true
          type:
            items:
              id: UperfWorkload
              type_id: ref
            type_id: list
    GlobalParams:
      properties:
        platform: 
          type:
            type_id: enum
        kubeconfig: 
          type:
            type_id: str
        es_server: 
          type:
            type_id: str
          default: https://search-perfscale-dev-chmf5l4sh66lvxbnadi4bznl3a.us-west-2.es.amazonaws.com:443
        uuid: 
          type:
            type_id: str
        run_id: #TODO -- I'm not sure how we use this and uuid separately
        cluster_name: 
          type:
            type_id: str
        system_metrics: #TODO -- This is dependent on how we implement the metrics plugin
          prom_url:
            type:
              type_id: str
            default: https://prometheus-k8s.openshift-monitoring.svc.cluster.local:9091
          prom_token: 
            type:
              type_id: str
          metrics_profile:
            type:
              type_id: enum
            default: node-metrics.yml
        metadata: #TODO -- This is dependent on how we implement the metadata plugin
          serviceaccount:
            type:
              type_id: str
            default: backpack-view
          targeted:
            type:
              type_id: bool
            default: false
    PlatformParams:
      #TODO
    SUTParams:
      properties:
        network_policy: 
          type:
            type_id: bool
          default: false
        multi_az: #TODO -- Isn't this platform specific?
          type:
            type_id: bool
          default: true
        hostnetwork: 
          type:
            type_id: bool
          default: false
        serviceip: 
          type:
            type_id: bool
          default: false
        test_timeout: 
          type:
            type_id: int
          default: 7200
        run_id: 
          type:
            type_id: str
        servicetype: #TODO -- Whatis?
          type:
            type_id: str
        metallb: #TODO
          addresspool: 
            type:
              type_id: str
          service_etp: 
            type:
              type_id: str
        multus:
          type:
            type_id: bool
          default: false
    WorkloadGeometry:
      samples: #TODO -- Need to think about the loop control for this
        type:
          type_id: int
        default: 3
      pairs:
        type:
          type_id: int #TODO -- Existing automation only tests with either 1 or 2 pairs; no full-scale tests are done
        default: 2
    UperfWorkload:
      #These parameters map directly to the uperf (client) input schema
      root: Profile
      objects:
        Profile:
          properties:
            groups:
              type:
                items:
                  id: ProfileGroup
                  type_id: ref
                type_id: list
        ProfileGroup:
          properties:
            transactions:
              type:
                items:
                  id: ProfileTransaction
                  type_id: ref
                type_id: list
             nthreads: #TODO -- We need to loop over a list of threads
              type:
                type_id: int
        ProfileTransaction:
          properties:
            flowops:
              type:
                items:
                  #TODO
                  type_id: one_of_string
              type_id: list
            #Note: duration is "runtime" in the benchmark-operator CR
            duration:
              type:
                type_id: str
              default: 60s
        ConnectFlowOp:
          properties:
            protocol: #TODO -- We need to loop over a list of protocols
              type:
                type_id: enum
            #TODO -- port and remotehost need to be set as part of the workflow steps when assigning a client to a server
            port:
              type:
                type_id: int
            remotehost:
              type:
                type_id: str
        test_types:  list[enum] #FIXME -- these are pseudonyms for flowop combinations
        sizes:  list[int] #FIXME -- this is a per-flowop param and they are single items per flowop


output: ${steps.run_uperf_client.output["success"]}


steps:
  #new plugin needed
  read_kubeconfig:
    plugin: quay.io/arcalot/read-kubeconfig-plugin:latest
    #TODO -- How do we collect the kubeconfig from the GlobalParams?
  #new plugin needed
  kube_host_lookup:
    #FIXME? -- A full host lookup at N scale has potential performance concerns
    plugin: quay.io/arcalot/kubernetes-host-lookup-plugin:latest
    input:
      credentials: ${steps.read_kubeconfig.output["success"].credentials}
      namespace: default
  #new plugin needed
  platform_config:
    plugin: quay.io/arcalot/kubernetes-platform-config-plugin:latest
    #TODO -- PlatformParams apply here
  #new plugin needed
  server_job_config:
    plugin: quay.io/arcalot/kubernetes-job-config-plugin:latest
    #TODO -- SUTParams apply here, and we may need to feed metadata for matching clients and servers
  #new plugin needed
  client_job_config:
    plugin: quay.io/arcalot/kubernetes-job-config-plugin:latest
    #TODO -- SUTParams apply here, and we may need to feed metadata for matching clients and servers
  #new plugin needed
  metadata_collector:
    plugin: quay.io/arcalot/kubernetes-metrics-collector-plugin:latest
    input:
      credentials: ${steps.read_kubeconfig.output["success"].credentials}
      namespace: default
  #new plugin needed
  metrics_collector:
    plugin: quay.io/arcalot/kubernetes-metadata-collector-plugin:latest
    input:
      credentials: ${steps.read_kubeconfig.output["success"].credentials}
      namespace: default
  run_uperf:server:
    #engine feature "parallel foreach" needed
    operator: parallel_foreach
    #FIXME -- Needs to be for each pair in pairs
    for_each: ${steps.kube_host_lookup.output["success"].host}
    steps:
      uperf_server:
        plugin: quay.io/arcalot/uperf-plugin:latest
        job_config: ${steps.server_job_config.output["success"]}
        step: server
        deploy:
          node: ${steps.run_uperf_server.current_item}
  run_uperf_client:
    needs:
      - steps.run_uperf_server.output["success"]
    operator: parallel_foreach
    #FIXME -- Needs to be for each pair in pairs
    for_each: ${steps.host_lookup.output["success"].host}
    steps:
      uperf_client:
        plugin: quay.io/arcalot/uperf:latest
        job_config: ${steps.client_job_config.output["success"]}
        step: client
        deploy:
          node: ${steps.run_uperf_client.current_item}
        input:
          target: ${select_random{steps.host_lookup.output["success"].host}}
  #new plugin needed
  es_translator:
    needs:
      - steps.metadata_collector.output["success"]
      - steps.metrics_collector.output["success"]
      - steps.run_uperf_client.output["success"]
    plugin: quay.io/arcalot/es-translator-plugin:latest
  #new plugin needed
  es_benchmark_wrapper_adapter:
    needs:
      - steps.es_translator.output["success"]
    plugin: quay.io/arcalot/es-benchmark-wrapper-adapter-plugin:latest